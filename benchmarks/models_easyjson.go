// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchmarks

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson(in *jlexer.Lexer, out *StructModelPtr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			if in.IsNull() {
				in.Skip()
				out.A = nil
			} else {
				if out.A == nil {
					out.A = new(string)
				}
				*out.A = string(in.String())
			}
		case "B":
			if in.IsNull() {
				in.Skip()
				out.B = nil
			} else {
				if out.B == nil {
					out.B = new(string)
				}
				*out.B = string(in.String())
			}
		case "C":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				if out.C == nil {
					out.C = new(string)
				}
				*out.C = string(in.String())
			}
		case "D":
			if in.IsNull() {
				in.Skip()
				out.D = nil
			} else {
				if out.D == nil {
					out.D = new(string)
				}
				*out.D = string(in.String())
			}
		case "E":
			if in.IsNull() {
				in.Skip()
				out.E = nil
			} else {
				if out.E == nil {
					out.E = new(string)
				}
				*out.E = string(in.String())
			}
		case "F":
			if in.IsNull() {
				in.Skip()
				out.F = nil
			} else {
				if out.F == nil {
					out.F = new(string)
				}
				*out.F = string(in.String())
			}
		case "G":
			if in.IsNull() {
				in.Skip()
				out.G = nil
			} else {
				if out.G == nil {
					out.G = new(string)
				}
				*out.G = string(in.String())
			}
		case "H":
			if in.IsNull() {
				in.Skip()
				out.H = nil
			} else {
				if out.H == nil {
					out.H = new(string)
				}
				*out.H = string(in.String())
			}
		case "I":
			if in.IsNull() {
				in.Skip()
				out.I = nil
			} else {
				if out.I == nil {
					out.I = new(string)
				}
				*out.I = string(in.String())
			}
		case "J":
			if in.IsNull() {
				in.Skip()
				out.J = nil
			} else {
				if out.J == nil {
					out.J = new(string)
				}
				*out.J = string(in.String())
			}
		case "K":
			if in.IsNull() {
				in.Skip()
				out.K = nil
			} else {
				if out.K == nil {
					out.K = new(string)
				}
				*out.K = string(in.String())
			}
		case "L":
			if in.IsNull() {
				in.Skip()
				out.L = nil
			} else {
				if out.L == nil {
					out.L = new(string)
				}
				*out.L = string(in.String())
			}
		case "M":
			if in.IsNull() {
				in.Skip()
				out.M = nil
			} else {
				if out.M == nil {
					out.M = new(string)
				}
				*out.M = string(in.String())
			}
		case "N":
			if in.IsNull() {
				in.Skip()
				out.N = nil
			} else {
				if out.N == nil {
					out.N = new(string)
				}
				*out.N = string(in.String())
			}
		case "O":
			if in.IsNull() {
				in.Skip()
				out.O = nil
			} else {
				if out.O == nil {
					out.O = new(string)
				}
				*out.O = string(in.String())
			}
		case "P":
			if in.IsNull() {
				in.Skip()
				out.P = nil
			} else {
				if out.P == nil {
					out.P = new(string)
				}
				*out.P = string(in.String())
			}
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				if out.Q == nil {
					out.Q = new(string)
				}
				*out.Q = string(in.String())
			}
		case "R":
			if in.IsNull() {
				in.Skip()
				out.R = nil
			} else {
				if out.R == nil {
					out.R = new(string)
				}
				*out.R = string(in.String())
			}
		case "S":
			if in.IsNull() {
				in.Skip()
				out.S = nil
			} else {
				if out.S == nil {
					out.S = new(string)
				}
				*out.S = string(in.String())
			}
		case "T":
			if in.IsNull() {
				in.Skip()
				out.T = nil
			} else {
				if out.T == nil {
					out.T = new(string)
				}
				*out.T = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson(out *jwriter.Writer, in StructModelPtr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		if in.A == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.A))
		}
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.B == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.B))
		}
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		if in.C == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.C))
		}
	}
	{
		const prefix string = ",\"D\":"
		out.RawString(prefix)
		if in.D == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.D))
		}
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		if in.E == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.E))
		}
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		if in.F == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.F))
		}
	}
	{
		const prefix string = ",\"G\":"
		out.RawString(prefix)
		if in.G == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.G))
		}
	}
	{
		const prefix string = ",\"H\":"
		out.RawString(prefix)
		if in.H == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.H))
		}
	}
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix)
		if in.I == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.I))
		}
	}
	{
		const prefix string = ",\"J\":"
		out.RawString(prefix)
		if in.J == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.J))
		}
	}
	{
		const prefix string = ",\"K\":"
		out.RawString(prefix)
		if in.K == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.K))
		}
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		if in.L == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.L))
		}
	}
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix)
		if in.M == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.M))
		}
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		if in.N == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.N))
		}
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		if in.O == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.O))
		}
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		if in.P == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.P))
		}
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Q))
		}
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		if in.R == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.R))
		}
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		if in.S == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.S))
		}
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		if in.T == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.T))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StructModelPtr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StructModelPtr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StructModelPtr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StructModelPtr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson(l, v)
}
func easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson1(in *jlexer.Lexer, out *StructModelIntern) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = string(in.StringIntern())
		case "B":
			out.B = string(in.StringIntern())
		case "C":
			out.C = string(in.StringIntern())
		case "D":
			out.D = string(in.StringIntern())
		case "E":
			out.E = string(in.StringIntern())
		case "F":
			out.F = string(in.StringIntern())
		case "G":
			out.G = string(in.StringIntern())
		case "H":
			out.H = string(in.StringIntern())
		case "I":
			out.I = string(in.StringIntern())
		case "J":
			out.J = string(in.StringIntern())
		case "K":
			out.K = string(in.StringIntern())
		case "L":
			out.L = string(in.StringIntern())
		case "M":
			out.M = string(in.StringIntern())
		case "N":
			out.N = string(in.StringIntern())
		case "O":
			out.O = string(in.StringIntern())
		case "P":
			out.P = string(in.StringIntern())
		case "Q":
			out.Q = string(in.StringIntern())
		case "R":
			out.R = string(in.StringIntern())
		case "S":
			out.S = string(in.StringIntern())
		case "T":
			out.T = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson1(out *jwriter.Writer, in StructModelIntern) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.String(string(in.A))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.B))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.C))
	}
	{
		const prefix string = ",\"D\":"
		out.RawString(prefix)
		out.String(string(in.D))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.String(string(in.E))
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.String(string(in.F))
	}
	{
		const prefix string = ",\"G\":"
		out.RawString(prefix)
		out.String(string(in.G))
	}
	{
		const prefix string = ",\"H\":"
		out.RawString(prefix)
		out.String(string(in.H))
	}
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix)
		out.String(string(in.I))
	}
	{
		const prefix string = ",\"J\":"
		out.RawString(prefix)
		out.String(string(in.J))
	}
	{
		const prefix string = ",\"K\":"
		out.RawString(prefix)
		out.String(string(in.K))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.L))
	}
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix)
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		out.String(string(in.N))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		out.String(string(in.O))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.P))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.Q))
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		out.String(string(in.R))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.S))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.String(string(in.T))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StructModelIntern) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StructModelIntern) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StructModelIntern) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StructModelIntern) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson1(l, v)
}
func easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson2(in *jlexer.Lexer, out *StructModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = string(in.String())
		case "B":
			out.B = string(in.String())
		case "C":
			out.C = string(in.String())
		case "D":
			out.D = string(in.String())
		case "E":
			out.E = string(in.String())
		case "F":
			out.F = string(in.String())
		case "G":
			out.G = string(in.String())
		case "H":
			out.H = string(in.String())
		case "I":
			out.I = string(in.String())
		case "J":
			out.J = string(in.String())
		case "K":
			out.K = string(in.String())
		case "L":
			out.L = string(in.String())
		case "M":
			out.M = string(in.String())
		case "N":
			out.N = string(in.String())
		case "O":
			out.O = string(in.String())
		case "P":
			out.P = string(in.String())
		case "Q":
			out.Q = string(in.String())
		case "R":
			out.R = string(in.String())
		case "S":
			out.S = string(in.String())
		case "T":
			out.T = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson2(out *jwriter.Writer, in StructModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.String(string(in.A))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.B))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.C))
	}
	{
		const prefix string = ",\"D\":"
		out.RawString(prefix)
		out.String(string(in.D))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.String(string(in.E))
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.String(string(in.F))
	}
	{
		const prefix string = ",\"G\":"
		out.RawString(prefix)
		out.String(string(in.G))
	}
	{
		const prefix string = ",\"H\":"
		out.RawString(prefix)
		out.String(string(in.H))
	}
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix)
		out.String(string(in.I))
	}
	{
		const prefix string = ",\"J\":"
		out.RawString(prefix)
		out.String(string(in.J))
	}
	{
		const prefix string = ",\"K\":"
		out.RawString(prefix)
		out.String(string(in.K))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.L))
	}
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix)
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		out.String(string(in.N))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		out.String(string(in.O))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.P))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.Q))
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		out.String(string(in.R))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.S))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.String(string(in.T))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StructModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StructModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StructModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StructModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson2(l, v)
}
func easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson3(in *jlexer.Lexer, out *MapModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapModel)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 string
			v1 = string(in.String())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson3(out *jwriter.Writer, in MapModel) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			out.String(string(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComMacroPowerMarshalBenchGoJson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComMacroPowerMarshalBenchGoJson3(l, v)
}
